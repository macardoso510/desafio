{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nexport default function createNumberMask(props) {\n  var _ref = props || {},\n      _ref$delimiter = _ref.delimiter,\n      delimiter = _ref$delimiter === void 0 ? '.' : _ref$delimiter,\n      _ref$precision = _ref.precision,\n      precision = _ref$precision === void 0 ? 2 : _ref$precision,\n      _ref$prefix = _ref.prefix,\n      prefix = _ref$prefix === void 0 ? [] : _ref$prefix,\n      _ref$separator = _ref.separator,\n      separator = _ref$separator === void 0 ? ',' : _ref$separator;\n\n  return function (value) {\n    var numericValue = (value === null || value === void 0 ? void 0 : value.replace(/\\D+/g, '')) || '';\n    var mask = numericValue.split('').map(function () {\n      return /\\d/;\n    });\n    var shouldAddSeparatorOnMask = precision > 0 && !!separator;\n\n    if (mask.length > precision && shouldAddSeparatorOnMask) {\n      mask.splice(-precision, 0, separator);\n    }\n\n    var amountOfDelimiters = Math.ceil((numericValue.length - precision) / 3) - 1;\n\n    if (delimiter) {\n      for (var i = 0; i < amountOfDelimiters; i++) {\n        var precisionOffset = precision;\n        var separatorOffset = shouldAddSeparatorOnMask ? 1 : 0;\n        var thousandOffset = 3 + (delimiter ? 1 : 0);\n        var delimiterPosition = -precisionOffset - separatorOffset - i * thousandOffset - 3;\n        mask.splice(delimiterPosition, 0, delimiter);\n      }\n    }\n\n    return [].concat(_toConsumableArray(prefix), _toConsumableArray(mask));\n  };\n}","map":{"version":3,"sources":["createNumberMask.ts"],"names":["delimiter","precision","prefix","separator","props","value","numericValue","mask","shouldAddSeparatorOnMask","amountOfDelimiters","Math","i","precisionOffset","separatorOffset","thousandOffset","delimiterPosition"],"mappings":";AAKA,eAAe,SAAA,gBAAA,CAAA,KAAA,EAA+D;AAC5E,aAAyEI,KAAK,IAA9E,EAAA;AAAA,4BAAQJ,SAAR;AAAA,MAAQA,SAAR,+BAAM,GAAN;AAAA,4BAAyBC,SAAzB;AAAA,MAAyBA,SAAzB,+BAAM,CAAN;AAAA,yBAAwCC,MAAxC;AAAA,MAAwCA,MAAxC,4BAAM,EAAN;AAAA,4BAAqDC,SAArD;AAAA,MAAqDA,SAArD,+BAAiE,GAAjE;;AAEA,SAAQE,UAAAA,KAAD,EAAoB;AACzB,QAAMC,YAAY,GAAG,CAAA,KAAK,KAAL,IAAA,IAAA,KAAK,KAAA,KAAL,CAAA,GAAA,KAAA,CAAA,GAAA,KAAK,CAAL,OAAA,CAAA,MAAA,EAAA,EAAA,CAAA,KAArB,EAAA;AAEA,QAAIC,IAAe,GAAGD,YAAY,CAAZA,KAAAA,CAAAA,EAAAA,EAAAA,GAAAA,CAA2B;AAAA,aAAjD,IAAiD;AAAA,KAA3BA,CAAtB;AAEA,QAAME,wBAAwB,GAAGP,SAAS,GAATA,CAAAA,IAAiB,CAAC,CAAnD,SAAA;;AAEA,QAAIM,IAAI,CAAJA,MAAAA,GAAAA,SAAAA,IAAJ,wBAAA,EAAyD;AACvDA,MAAAA,IAAI,CAAJA,MAAAA,CAAY,CAAZA,SAAAA,EAAAA,CAAAA,EAAAA,SAAAA;AACD;;AAED,QAAME,kBAAkB,GAAGC,IAAI,CAAJA,IAAAA,CAAU,CAACJ,YAAY,CAAZA,MAAAA,GAAD,SAAA,IAAVI,CAAAA,IAA3B,CAAA;;AAEA,QAAA,SAAA,EAAe;AACb,WAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,kBAAA,EAAwCA,CAAxC,EAAA,EAA6C;AAC3C,YAAMC,eAAe,GAArB,SAAA;AACA,YAAMC,eAAe,GAAGL,wBAAwB,GAAA,CAAA,GAAhD,CAAA;AACA,YAAMM,cAAc,GAAG,KAAKd,SAAS,GAAA,CAAA,GAArC,CAAuB,CAAvB;AACA,YAAMe,iBAAiB,GACrB,CAAA,eAAA,GAAA,eAAA,GAAqCJ,CAAC,GAAtC,cAAA,GADF,CAAA;AAGAJ,QAAAA,IAAI,CAAJA,MAAAA,CAAAA,iBAAAA,EAAAA,CAAAA,EAAAA,SAAAA;AACD;AACF;;AAED,wCAAO,MAAP,sBAAA,IAAA;AAzBF,GAAA;AA2BD","sourcesContent":["import type { MaskArray } from './formatWithMask.types';\n\nimport type { Mask } from './formatWithMask.types';\nimport type { CreateNumberMaskProps } from './createNumberMask.types';\n\nexport default function createNumberMask(props?: CreateNumberMaskProps): Mask {\n  const { delimiter = '.', precision = 2, prefix = [], separator = ',' } = props || {};\n\n  return (value?: string) => {\n    const numericValue = value?.replace(/\\D+/g, '') || '';\n\n    let mask: MaskArray = numericValue.split('').map(() => /\\d/);\n\n    const shouldAddSeparatorOnMask = precision > 0 && !!separator;\n\n    if (mask.length > precision && shouldAddSeparatorOnMask) {\n      mask.splice(-precision, 0, separator);\n    }\n\n    const amountOfDelimiters = Math.ceil((numericValue.length - precision) / 3) - 1;\n\n    if (delimiter) {\n      for (let i = 0; i < amountOfDelimiters; i++) {\n        const precisionOffset = precision;\n        const separatorOffset = shouldAddSeparatorOnMask ? 1 : 0;\n        const thousandOffset = 3 + (delimiter ? 1 : 0);\n        const delimiterPosition =\n          -precisionOffset - separatorOffset - i * thousandOffset - 3;\n\n        mask.splice(delimiterPosition, 0, delimiter);\n      }\n    }\n\n    return [...prefix, ...mask];\n  };\n}\n"]},"metadata":{},"sourceType":"module"}