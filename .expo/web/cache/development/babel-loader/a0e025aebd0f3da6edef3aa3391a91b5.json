{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport MaskInput, { Masks } from 'react-native-mask-input';\nimport { Button } from 'react-native-elements/dist/buttons/Button';\nimport Confirmacao from \"../modais/Confirmacao\";\nimport Error from \"../modais/Error\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar y;\nexport default function ResgateInvestimento(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _useState = useState(navigation.route.params.dado),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      text = _useState4[0],\n      setText = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      valorSoma = _useState6[0],\n      setValorSoma = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      modalVisible = _useState8[0],\n      setModalVisible = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      modalVisibleErro = _useState10[0],\n      setModalVisibleErro = _useState10[1];\n\n  useEffect(function () {}, []);\n\n  function confirmar() {\n    setModalVisible(true);\n  }\n\n  function showModal() {\n    setModalVisible(true);\n  }\n\n  function ModalErro() {\n    _jsxs(View, {\n      style: styles.centeredView,\n      children: [_jsx(View, {\n        style: styles.centeredView,\n        children: _jsxs(View, {\n          style: styles.modalView,\n          children: [_jsx(Text, {\n            style: styles.modalText,\n            children: \"Erro\"\n          }), _jsx(Pressable, {\n            style: [styles.button, styles.buttonClose],\n            onPress: function onPress() {\n              return setModalVisible(!modalVisible);\n            },\n            children: _jsx(Text, {\n              style: styles.textStyle,\n              children: \"Hide Modal\"\n            })\n          })]\n        })\n      }), _jsx(Pressable, {\n        style: [styles.button, styles.buttonOpen],\n        onPress: setModalVisibleErro(false),\n        children: _jsx(Text, {\n          style: styles.textStyle,\n          children: \"Show Modal\"\n        })\n      })]\n    });\n  }\n\n  function ModalConfirmar() {\n    _jsxs(View, {\n      style: styles.centeredView,\n      children: [_jsx(View, {\n        style: styles.centeredView,\n        children: _jsxs(View, {\n          style: styles.modalView,\n          children: [_jsx(Text, {\n            style: styles.modalText,\n            children: \"Confirmar\"\n          }), _jsx(Pressable, {\n            style: [styles.button, styles.buttonClose],\n            onPress: function onPress() {\n              return setModalVisible(!modalVisible);\n            },\n            children: _jsx(Text, {\n              style: styles.textStyle,\n              children: \"Hide Modal\"\n            })\n          })]\n        })\n      }), _jsx(Pressable, {\n        style: [styles.button, styles.buttonOpen],\n        onPress: setModalVisible(false),\n        children: _jsx(Text, {\n          style: styles.textStyle,\n          children: \"Show Modal\"\n        })\n      })]\n    });\n  }\n\n  function valorResgate(texto, dado, x) {\n    var formatar = texto.replace('R$', '').replace('.', '').replace(' ', '');\n    var formatarMoeda = formatar.replace(',', '.');\n    var soma = 0;\n\n    var array = _toConsumableArray(text);\n\n    y = x;\n    array[x] = _objectSpread(_objectSpread({}, dado), {}, {\n      valorResgatar: formatarMoeda,\n      erro: formatarMoeda > dado.percentual * value.saldoTotal / 100 ? true : false\n    });\n    setText(array);\n\n    for (var _x in array) {\n      if (array[_x]) {\n        soma += parseFloat(array[_x].valorResgatar);\n        console.log(\"s\", soma);\n        setValorSoma(soma);\n      } else {\n        console.log(\"e\", soma);\n        setValorSoma(soma);\n      }\n    }\n  }\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(SafeAreaView, {\n      children: _jsxs(ScrollView, {\n        children: [_jsx(View, {\n          style: styles.header,\n          children: _jsx(Text, {\n            style: styles.texto,\n            children: \"Resgate\"\n          })\n        }), _jsx(View, {\n          children: _jsx(View, {\n            style: {\n              flexDirection: 'row',\n              justifyContent: 'space-between'\n            },\n            children: _jsx(Text, {\n              style: {\n                color: '#4B4B4B',\n                padding: 7,\n                margin: 7\n              },\n              children: \"DADOS DO INVESTIMENTO\"\n            })\n          })\n        }), _jsxs(View, {\n          style: styles.viewA,\n          children: [_jsx(Text, {\n            style: styles.viewB,\n            children: \"NOME\"\n          }), _jsx(Text, {\n            style: styles.textA,\n            children: value.nome\n          })]\n        }), _jsxs(View, {\n          style: styles.viewA,\n          children: [_jsx(Text, {\n            style: styles.viewB,\n            children: \"Saldo total dispon\\xEDvel\"\n          }), _jsx(Text, {\n            style: styles.textA,\n            children: value.saldoTotal.toLocaleString('pt-BR', {\n              style: 'currency',\n              currency: 'BRL'\n            })\n          })]\n        }), _jsx(View, {\n          style: {\n            flexDirection: 'row',\n            justifyContent: 'space-between'\n          },\n          children: _jsx(Text, {\n            style: {\n              color: '#4B4B4B',\n              padding: 7,\n              margin: 7\n            },\n            children: \"RESGATE DO SEU JEITO\"\n          })\n        }), value.acoes.map(function (dado, i) {\n          return _jsxs(View, {\n            children: [_jsxs(View, {\n              style: styles.viewA,\n              children: [_jsx(Text, {\n                style: styles.viewB,\n                children: \"A\\xE7\\xE3o\"\n              }), _jsx(Text, {\n                style: styles.textA,\n                children: dado.nome\n              })]\n            }), _jsxs(View, {\n              style: styles.viewA,\n              children: [_jsx(Text, {\n                style: styles.viewB,\n                children: \"Saldo acumulado\"\n              }), _jsx(Text, {\n                style: styles.textA,\n                children: (dado.percentual * value.saldoTotal / 100).toLocaleString('pt-BR', {\n                  style: 'currency',\n                  currency: 'BRL'\n                })\n              })]\n            }), _jsxs(View, {\n              style: {\n                backgroundColor: '#ffffff',\n                marginBottom: 2\n              },\n              children: [_jsx(MaskInput, {\n                style: {\n                  borderRadius: 0,\n                  backgroundColor: '#fff',\n                  color: '#1e72b0',\n                  height: 50,\n                  margin: 7,\n                  padding: 7\n                },\n                placeholder: \"Valor a resgatar\",\n                keyboardType: \"numeric\",\n                mask: Masks.BRL_CURRENCY,\n                value: text[i] && text[i].valorResgatar || '',\n                onChangeText: function onChangeText(texto) {\n                  return valorResgate(texto, dado, i);\n                }\n              }), text[i] && text[i].erro && _jsx(View, {\n                children: _jsxs(Text, {\n                  style: {\n                    color: 'red'\n                  },\n                  children: [\"Valor n\\xE3o pode ser maior que \", (dado.percentual * value.saldoTotal / 100).toLocaleString('pt-br', {\n                    style: 'currency',\n                    currency: 'BRL'\n                  })]\n                })\n              })]\n            })]\n          }, i);\n        }), _jsxs(View, {\n          style: {\n            height: 50,\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n            backgroundColor: '#ffffff'\n          },\n          children: [_jsx(Text, {\n            style: styles.viewB,\n            children: \"Valor total a resgatar\"\n          }), _jsx(Text, {\n            style: styles.textA,\n            children: valorSoma.toLocaleString('pt-br', {\n              style: 'currency',\n              currency: 'BRL'\n            })\n          })]\n        }), _jsx(Button, {\n          buttonStyle: {\n            backgroundColor: '#FFF003',\n            color: '1e72b0',\n            fontWeight: 'bold'\n          },\n          color: \"1e72b0\",\n          titleStyle: {\n            color: '#1e72b0',\n            fontWeight: 'bold'\n          },\n          title: \"Confirmar resgate\",\n          onPress: showModal\n        })]\n      })\n    }), _jsx(Modal, {\n      transparent: true,\n      animationType: \"slide\",\n      visible: modalVisible,\n      children: _jsx(Confirmacao, {})\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"#eaeaea\",\n    flex: 1,\n    padding: 0,\n    paddingHorizontal: 0,\n    width: '100%'\n  },\n  header: {\n    margin: 0,\n    backgroundColor: '#1e72b0',\n    top: 0,\n    height: 120,\n    width: '100%',\n    borderBottomWidth: 8,\n    borderBottomColor: '#Fdfa5e'\n  },\n  texto: {\n    color: '#fff',\n    textAlign: 'center',\n    marginTop: 60,\n    fontSize: 25,\n    fontWeight: 'bold'\n  },\n  viewA: {\n    height: 50,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    backgroundColor: '#ffffff',\n    marginBottom: 1,\n    borderBottomWidth: 1,\n    borderBottomColor: '#eaeaea'\n  },\n  viewB: {\n    color: '#000000',\n    padding: 7,\n    margin: 7,\n    fontWeight: 'bold',\n    fontSize: 17\n  },\n  textA: {\n    color: '#7B7A7A',\n    padding: 7,\n    margin: 7,\n    fontWeight: 'bold'\n  },\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 22\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  button: {\n    borderRadius: 0,\n    padding: 10,\n    elevation: 2\n  },\n  buttonOpen: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"#FFF003\",\n    margin: 100,\n    top: 100,\n    height: 50,\n    fontWeight: 'bold'\n  },\n  buttonClose: {\n    margin: 80,\n    width: 300\n  },\n  textStyle: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  modalText: {},\n  modalA: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 22\n  }\n});","map":{"version":3,"sources":["/home/rafadesk/Documentos/Mateus/git/desafio/src/pages/ResgateInvestimento.js"],"names":["React","useEffect","useState","MaskInput","Masks","Button","Confirmacao","Error","y","ResgateInvestimento","route","navigation","params","dado","value","setValue","text","setText","valorSoma","setValorSoma","modalVisible","setModalVisible","modalVisibleErro","setModalVisibleErro","confirmar","showModal","ModalErro","styles","centeredView","modalView","modalText","button","buttonClose","textStyle","buttonOpen","ModalConfirmar","valorResgate","texto","x","formatar","replace","formatarMoeda","soma","array","valorResgatar","erro","percentual","saldoTotal","parseFloat","console","log","container","header","flexDirection","justifyContent","color","padding","margin","viewA","viewB","textA","nome","toLocaleString","style","currency","acoes","map","i","backgroundColor","marginBottom","borderRadius","height","BRL_CURRENCY","fontWeight","StyleSheet","create","flex","paddingHorizontal","width","top","borderBottomWidth","borderBottomColor","textAlign","marginTop","fontSize","alignItems","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","modalA"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { FlatList, Modal, Pressable, SafeAreaView, ScrollView, StyleSheet, Text, View } from 'react-native';\n// import { TextInput } from 'react-native-paper';\nimport MaskInput, { Masks } from 'react-native-mask-input';\nimport { Button } from 'react-native-elements/dist/buttons/Button';\nimport Confirmacao from '../modais/Confirmacao';\nimport Error from '../modais/Error'\nvar y\nexport default function ResgateInvestimento({ route, navigation }) {\n    const [value, setValue] = useState(navigation.route.params.dado);\n    const [text, setText] = useState([]);\n    const [valorSoma, setValorSoma] = useState(0);\n    const [modalVisible, setModalVisible] = useState(false);\n    const [modalVisibleErro, setModalVisibleErro] = useState(false);\n    // const { itemId, otherParam } = route.params;\n    useEffect(() => {\n    }, []);\n    function confirmar() {\n        setModalVisible(true)\n    }\n\n\n\n    function showModal() {\n        setModalVisible(true)\n        // for (let x in text.) {\n        //     const xpto = resgate[x]\n        //     if (xpto && xpto.erro === true) {\n        //         setModalVisibleErro(true)\n        //         return;\n        //     }\n\n        // }\n        // if (totalResgate === '') {\n        //     alert('Selecione um valor valido.')\n        //     return;\n        // } else {\n        //     setModalVisible(true)\n        // }\n\n\n    }\n\n    function ModalErro() {\n        <View style={styles.centeredView}>\n\n            <View style={styles.centeredView}>\n                <View style={styles.modalView}>\n                    <Text style={styles.modalText}>Erro</Text>\n                    <Pressable\n                        style={[styles.button, styles.buttonClose]}\n                        onPress={() => setModalVisible(!modalVisible)}\n                    >\n                        <Text style={styles.textStyle}>Hide Modal</Text>\n                    </Pressable>\n                </View>\n            </View>\n\n            <Pressable\n                style={[styles.button, styles.buttonOpen]}\n                onPress={setModalVisibleErro(false)}\n            >\n                <Text style={styles.textStyle}>Show Modal</Text>\n            </Pressable>\n        </View>\n    }\n\n\n    function ModalConfirmar() {\n        <View style={styles.centeredView}>\n\n            <View style={styles.centeredView}>\n                <View style={styles.modalView}>\n                    <Text style={styles.modalText}>Confirmar</Text>\n                    <Pressable\n                        style={[styles.button, styles.buttonClose]}\n                        onPress={() => setModalVisible(!modalVisible)}\n                    >\n                        <Text style={styles.textStyle}>Hide Modal</Text>\n                    </Pressable>\n                </View>\n            </View>\n\n            <Pressable\n                style={[styles.button, styles.buttonOpen]}\n                onPress={setModalVisible(false)}\n            >\n                <Text style={styles.textStyle}>Show Modal</Text>\n            </Pressable>\n        </View>\n    }\n\n\n\n\n    function valorResgate(texto, dado, x) {\n        let formatar = texto.replace('R$', '').replace('.', '').replace(' ', '');\n        let formatarMoeda = formatar.replace(',', '.')\n        let soma = 0;\n        const array = [...text];\n        y = x\n        array[x] = {\n            ...dado,\n            valorResgatar: formatarMoeda,\n            erro: formatarMoeda > (dado.percentual * value.saldoTotal / 100) ? true : false\n        }\n        setText(array)\n        // console.log(array)\n        // for (let y in array[x]) {\n        //     if (array[y].valorResgatar){\n        //     soma += parseFloat(array[y].valorResgatar);\n        // }\n        for (let x in array) {\n\n            if (array[x]) {\n                soma += parseFloat(array[x].valorResgatar);\n                console.log(\"s\", soma)\n                setValorSoma(soma)\n            } else {\n                console.log(\"e\", soma)\n                // soma += parseFloat(array[x].valorResgatar);\n                setValorSoma(soma)\n\n            }\n\n        }\n        // }\n    }\n    return (\n        <View style={styles.container}>\n            <SafeAreaView >\n                <ScrollView >\n                    <View style={styles.header}>\n                        <Text style={styles.texto}>Resgate</Text>\n                    </View>\n                    <View>\n                        <View style={{\n                            flexDirection: 'row',\n                            justifyContent: 'space-between',\n                        }}>\n                            <Text style={{ color: '#4B4B4B', padding: 7, margin: 7 }}>DADOS DO INVESTIMENTO</Text>\n                        </View>\n                    </View>\n\n                    <View style={styles.viewA}>\n                        <Text style={styles.viewB}>NOME</Text>\n                        <Text style={styles.textA}>{value.nome}</Text>\n                    </View>\n                    <View\n                        style={styles.viewA}\n                    >\n                        <Text style={styles.viewB}>Saldo total disponível</Text>\n                        <Text style={styles.textA}>{value.saldoTotal.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</Text>\n                    </View>\n                    <View style={{\n                        flexDirection: 'row',\n                        justifyContent: 'space-between',\n                    }}>\n                        <Text style={{ color: '#4B4B4B', padding: 7, margin: 7 }}>RESGATE DO SEU JEITO</Text>\n                    </View>\n\n                    {value.acoes.map((dado, i) =>\n                        <View\n                            key={i}\n\n                        >\n                            <View style={styles.viewA}>\n                                <Text style={styles.viewB}>Ação</Text>\n                                <Text style={styles.textA}>{dado.nome}</Text>\n                            </View>\n\n                            <View style={styles.viewA}>\n                                <Text style={styles.viewB}>Saldo acumulado</Text>\n                                <Text style={styles.textA}>{(dado.percentual * value.saldoTotal / 100).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</Text>\n                            </View>\n                            <View\n                                style={{\n                                    backgroundColor: '#ffffff',\n                                    marginBottom: 2\n                                }}\n                            >\n                                {/* <MaskInput\n                                    style={{\n                                        borderRadius: 0,\n                                        backgroundColor: '#fff',\n                                        color: '#1e72b0',\n                                        height: 50\n                                    }}\n                                    label=\"Valor a Resgatar\"\n                                    value={text}\n                                    onChangeText={text => setText(text)}\n                                    keyboardType='numeric'\n                                    onBlur={() => console.log(\"focus lost\") }\n                                /> */}\n\n                                <MaskInput\n                                    style={{\n                                        borderRadius: 0,\n                                        backgroundColor: '#fff',\n                                        color: '#1e72b0',\n                                        height: 50,\n                                        margin: 7,\n                                        padding: 7\n                                    }}\n                                    placeholder='Valor a resgatar'\n                                    keyboardType=\"numeric\"\n                                    mask={Masks.BRL_CURRENCY}\n                                    // value={resgate[item.id] && resgate[item.id].valorResgatar || ''}\n                                    value={text[i] && text[i].valorResgatar || ''}\n\n                                    onChangeText={(texto) => valorResgate(texto, dado, i)}\n\n                                />\n                                {text[i] && text[i].erro &&\n                                    <View >\n                                        <Text style={{ color: 'red' }}>Valor não pode ser maior que {(dado.percentual * value.saldoTotal / 100).toLocaleString('pt-br', { style: 'currency', currency: 'BRL' })}</Text>\n                                    </View>\n                                }\n                            </View>\n                        </View>\n\n                    )}\n                    <View style={{\n                        height: 50,\n                        flexDirection: 'row',\n                        justifyContent: 'space-between',\n                        backgroundColor: '#ffffff',\n                    }}>\n                        <Text style={styles.viewB}>Valor total a resgatar</Text>\n                        <Text style={styles.textA}>{valorSoma.toLocaleString('pt-br', { style: 'currency', currency: 'BRL' })}</Text>\n                    </View>\n                    <Button\n                        buttonStyle={{ backgroundColor: '#FFF003', color: '1e72b0', fontWeight: 'bold' }}\n                        color=\"1e72b0\"\n                        titleStyle={{\n                            color: '#1e72b0',\n                            fontWeight: 'bold'\n                        }}\n                        title=\"Confirmar resgate\"\n                        onPress={showModal}\n                    // onPress={storingDomain}\n                    />\n\n\n                </ScrollView>\n            </SafeAreaView>\n\n            <Modal transparent={true} animationType='slide' visible={modalVisible}>{<Confirmacao />}</Modal>\n\n\n\n\n            {/* Modal pra sucesso */}\n            {/* <View >\n                <Modal\n                    animationType=\"slide\"\n                    transparent={true}\n                    visible={modalVisible}\n                    onRequestClose={() => {\n                        // Alert.alert(\"Modal has been clo?sed.\");\n                        setModalVisible(!modalVisible);\n                    }}\n                >\n                    <View style={{\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                        // marginTop: 22,\n                        \n                        flex: 1,\n                    }} >\n                        <View style={styles.modalView}>\n                            <View >\n                                <Text style={{top: 50, fontSize: 16,  fontWeight: 'bold' }} >RESGATE EFETUADO!</Text>\n                            </View>\n                                <Text style={{margin:7, padding: 7, top: 50, fontSize: 13, fontWeight: '100'} }>O valor solicitado estará em sua conta em até 5 dias úteis</Text>\n                            <Pressable\n                                style={styles.buttonOpen}\n                                onPress={() => setModalVisible(!modalVisible)}\n                                title='aaaa'\n                            >\n                                <Text >Hide Modal</Text>\n                            </Pressable>\n                        </View>\n                    </View>\n                </Modal>\n            </View> */}\n\n\n\n            {/* Modal pra erro */}\n            {/* {text.valorResgatar > value.acoes[y] ?\n                <View >\n                    <Modal\n                        animationType=\"slide\"\n                        transparent={true}\n                        visible={modalVisible}\n                        onRequestClose={() => {\n                            // Alert.alert(\"Modal has been clo?sed.\");\n                            console.log(text)\n                            setModalVisible(!modalVisible);\n                        }}\n                    >\n                        <View style={{\n                            justifyContent: \"center\",\n                            alignItems: \"center\",\n                            // marginTop: 22,\n\n                            flex: 1,\n                        }} >\n                            <View style={styles.modalView}>\n                                <View >\n                                    <Text style={{ top: 50, fontSize: 16, fontWeight: 'bold' }} >DADOS INVÁLIDOS!</Text>\n                                </View>\n                                <Text style={{ margin: 7, padding: 7, top: 50, fontSize: 13, fontWeight: '100' }}>Você preencheu um ou mais campos com valor acima do permitido</Text>\n                                <Pressable\n                                    style={styles.buttonOpen}\n                                    onPress={() => console.log(text, value)}\n                                    title='aaaa'\n                                >\n                                    <Text >Hide Modal</Text>\n                                </Pressable>\n                            </View>\n                        </View>\n                    </Modal>\n                </View>\n                :\n                <View >\n                    <Modal\n                        animationType=\"slide\"\n                        transparent={true}\n                        visible={modalVisible}\n                        onRequestClose={() => {\n                            // Alert.alert(\"Modal has been clo?sed.\");\n                            setModalVisible(!modalVisible);\n                        }}\n                    >\n                        <View style={{\n                            justifyContent: \"center\",\n                            alignItems: \"center\",\n                            // marginTop: 22,\n\n                            flex: 1,\n                        }} >\n                            <View style={styles.modalView}>\n                                <View >\n                                    <Text style={{ top: 50, fontSize: 16, fontWeight: 'bold' }} >RESGATE EFETUADO!</Text>\n                                </View>\n                                <Text style={{ margin: 7, padding: 7, top: 50, fontSize: 13, fontWeight: '100' }}>O valor solicitado estará em sua conta em até 5 dias úteis</Text>\n                                <Pressable\n                                    style={styles.buttonOpen}\n                                    onPress={confirmar}\n                                    onPress={() => console.log('>>>>', value.acoes[y])}\n                                    title='aaaa'\n                                >\n                                    <Text >Hide Modal</Text>\n                                </Pressable>\n                            </View>\n                        </View>\n                    </Modal>\n                </View>\n\n            } */}\n\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: \"#eaeaea\",\n        flex: 1,\n        padding: 0,\n        paddingHorizontal: 0,\n        width: '100%',\n    },\n    header: {\n        margin: 0,\n        // position: 'absolute',\n        // overflow: 'hidden',\n        backgroundColor: '#1e72b0',\n        top: 0,\n        height: 120,\n        width: '100%',\n        borderBottomWidth: 8,\n        borderBottomColor: '#Fdfa5e'\n    },\n    texto: {\n        color: '#fff',\n        textAlign: 'center',\n        marginTop: 60,\n        fontSize: 25,\n        fontWeight: 'bold'\n    },\n    viewA: {\n        height: 50,\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        backgroundColor: '#ffffff',\n        marginBottom: 1,\n        borderBottomWidth: 1,\n        borderBottomColor: '#eaeaea'\n    },\n    viewB: {\n        color: '#000000',\n        padding: 7,\n        margin: 7,\n        fontWeight: 'bold',\n        fontSize: 17\n    },\n    textA: {\n        color: '#7B7A7A',\n        padding: 7,\n        margin: 7,\n        fontWeight: 'bold'\n    },\n    centeredView: {\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        marginTop: 22,\n\n    },\n    modalView: {\n        margin: 20,\n        backgroundColor: \"white\",\n        // padding: 35,\n        alignItems: \"center\",\n        shadowColor: \"#000\",\n        shadowOffset: {\n            width: 0,\n            height: 2\n        },\n        shadowOpacity: 0.25,\n        shadowRadius: 4,\n        elevation: 5,\n        // height: 150,\n        // width: 300,\n    },\n    button: {\n        borderRadius: 0,\n        padding: 10,\n        elevation: 2\n    },\n    buttonOpen: {\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        backgroundColor: \"#FFF003\",\n        margin: 100,\n        top: 100,\n        height: 50,\n        fontWeight: 'bold'\n    },\n    buttonClose: {\n        // backgroundColor: \"#2196F3\",\n        // height: 300,\n        margin: 80,\n        width: 300,\n    },\n    textStyle: {\n        color: \"white\",\n        fontWeight: \"bold\",\n        textAlign: \"center\"\n    },\n    modalText: {\n        // marginBottom: 213,\n        // height: 120,\n        // width: 120,\n        // textAlign: \"center\"\n    },\n    modalA: {\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        marginTop: 22,\n    }\n\n});\n"]},"metadata":{},"sourceType":"module"}